package com.dashidao.view.web.action;

import com.dashidao.core.domain.virtual.SysMap;
import com.dashidao.core.mv.JModelAndView;
import com.dashidao.core.query.support.IPageList;
import com.dashidao.core.security.support.SecurityUserHolder;
import com.dashidao.core.tools.CommUtil;
import com.dashidao.foundation.domain.Accessory;
import com.dashidao.foundation.domain.Address;
import com.dashidao.foundation.domain.Area;
import com.dashidao.foundation.domain.Goods;
import com.dashidao.foundation.domain.GoodsSpecProperty;
import com.dashidao.foundation.domain.GoodsSpecification;
import com.dashidao.foundation.domain.OrderForm;
import com.dashidao.foundation.domain.Recommend;
import com.dashidao.foundation.domain.Store;
import com.dashidao.foundation.domain.StoreClass;
import com.dashidao.foundation.domain.StoreGoods;
import com.dashidao.foundation.domain.StoreNavigation;
import com.dashidao.foundation.domain.query.EvaluateQueryObject;
import com.dashidao.foundation.domain.query.GoodsQueryObject;
import com.dashidao.foundation.domain.query.StoreGoodsQueryObject;
import com.dashidao.foundation.domain.query.StoreQueryObject;
import com.dashidao.foundation.service.*;
import com.dashidao.jwt.filter.SignFilter;
import com.dashidao.jwt.util.ComplexOutPropertyPreFilter;
import com.dashidao.jwt.util.DateJsonValueProcessor;
import com.dashidao.view.web.tools.AreaViewTools;
import com.dashidao.view.web.tools.GoodsViewTools;
import com.dashidao.view.web.tools.StoreViewTools;

import io.jsonwebtoken.Claims;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import net.sf.json.JsonConfig;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import java.io.IOException;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 * 推荐服务
 */
@Controller
public class RecommendViewAction {
	@Autowired
	private IUserService userService;
	
	@Autowired
	private IRecommendService recommendService;
	

	  /**
	    * 推荐服务  及链接
	    * @param request
	    * @param response
	    * @param type 推荐类型
	    * @throws IOException
	    */
		@RequestMapping({ "/wap/recommend.htm" })
		@ResponseBody
		public void recommend(HttpServletRequest request, HttpServletResponse response,String type) throws IOException {
			Map<String,Object> params = new HashMap<>();
			params.put("state", 0);
			//Claims claims = SignFilter.checkSign(request, response);
			//if (claims != null) {
			//	String id = claims.getId();
				
				Recommend recommend = new Recommend();
				
				recommend.setAddTime(new Date());
				recommend.setRecommend_type(type);
				//recommend.setUser(this.userService.getObjById(Long.parseLong(id)));
				recommend.setUser(this.userService.getObjById(Long.parseLong("1")));
             
				this.recommendService.save(recommend);
				
				params.put("url", "../../.../*.htm?type=YUNKE&uid=0");
				params.put("state", 1);
			 // }
				SignFilter.printNoCheck(request, response, params);
		}
		 /**
		    * 服务统计
		    * @param request
		    * @param response
		    * @param state 推荐类型
		    * @throws IOException
		    */
			@RequestMapping({ "/wap/totalrecommend.htm" })
			@ResponseBody
			public void totalrecommend(HttpServletRequest request, HttpServletResponse response,String type) throws IOException {
				Map<String,Object> whereMap = new HashMap<>();
				whereMap.put("state", 0);
				//Claims claims = SignFilter.checkSign(request, response);
				//if (claims != null) {
				//	String id = claims.getId();
					Map params = new HashMap();
					 params.put("recommend_type", type);
					 //params.put("user_id", Long.parseLong(id));
					 params.put("user_id", Long.parseLong("1"));
				        List<Recommend> recommend_list = this.recommendService
				                                 .query(
				                                     "select obj.id from Recommend obj where obj.recommend_type =:recommend_type and obj.user.id=:user_id",
				                                     params, -1, -1);
				        
				        int count = recommend_list.size();
				        whereMap.put("count", count);
				        whereMap.put("state", 1);
				//}
				SignFilter.printNoCheck(request, response, whereMap);
			}
}
