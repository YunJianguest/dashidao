package com.dashidao.view.web.action;

import com.dashidao.core.domain.virtual.SysMap;
import com.dashidao.core.mv.JModelAndView;
import com.dashidao.core.query.support.IPageList;
import com.dashidao.core.security.support.SecurityUserHolder;
import com.dashidao.core.tools.CommUtil;
import com.dashidao.core.tools.Md5Encrypt;
import com.dashidao.foundation.domain.*;
import com.dashidao.foundation.domain.query.GoodsCartQueryObject;
import com.dashidao.foundation.domain.query.OrderFormQueryObject;
import com.dashidao.foundation.domain.query.StoreCartQueryObject;
import com.dashidao.foundation.service.*;
import com.dashidao.jwt.config.TokenTool;
import com.dashidao.jwt.filter.SignFilter;
import com.dashidao.jwt.util.ComplexOutPropertyPreFilter;
import com.dashidao.jwt.util.DateJsonValueProcessor;
import com.dashidao.manage.admin.tools.MsgTools;
import com.dashidao.view.web.tools.GoodsFloorViewTools;
import com.dashidao.view.web.tools.GoodsViewTools;
import com.dashidao.view.web.tools.NavViewTools;
import com.dashidao.view.web.tools.StoreViewTools;

import io.jsonwebtoken.Claims;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import net.sf.json.JsonConfig;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.*;

/**
 * 商城订单制器
 * @author lsp
 *
 */
@Controller
public class OrderViewAction {
    @Autowired
    private ISysConfigService configService;

    @Autowired
    private IUserConfigService userConfigService;

    @Autowired
    private IGoodsClassService goodsClassService;

    @Autowired
    private IGoodsBrandService goodsBrandService;

    @Autowired
    private IPartnerService partnerService;

    @Autowired
    private IRoleService roleService;

    @Autowired
    private IUserService userService;

    @Autowired
    private IArticleClassService articleClassService;

    @Autowired
    private IArticleService articleService;

    @Autowired
    private IAccessoryService accessoryService;

    @Autowired
    private IMessageService messageService;

    @Autowired
    private IStoreService storeService;

    @Autowired
    private IGoodsService goodsService;

    @Autowired
    private INavigationService navigationService;

    @Autowired
    private IGroupGoodsService groupGoodsService;

    @Autowired
    private IGroupService groupService;

    @Autowired
    private IGoodsFloorService goodsFloorService;

    @Autowired
    private IBargainGoodsService bargainGoodsService;

    @Autowired
    private IDeliveryGoodsService deliveryGoodsService;

    @Autowired
    private IStoreCartService storeCartService;

    @Autowired
    private IGoodsCartService goodsCartService;
    @Autowired
    private IAdvertService advertservice;

    @Autowired
    private NavViewTools navTools;

    @Autowired
    private IOrderFormService orderFormService;
    @Autowired
    private GoodsViewTools goodsViewTools;

    @Autowired
    private StoreViewTools storeViewTools;

    @Autowired
    private MsgTools msgTools;

    @Autowired
    private GoodsFloorViewTools gf_tools;
    
    //会员订单列表
    @RequestMapping({ "/wap/buyer/order.htm" })
    public ModelAndView buyerorder(HttpServletRequest request, HttpServletResponse response,String currentPage,String order_status){
    	   ModelAndView mv = new JModelAndView(
                   "wap/buyer/order.html", this.configService
                   .getSysConfig(),
                   this.userConfigService.getUserConfig(), 0, request, response);
    	   if (SecurityUserHolder.getCurrentUser()==null) {
    		   mv = new JModelAndView(
                       "wap/buyer/login.html", this.configService
                       .getSysConfig(),
                       this.userConfigService.getUserConfig(), 0, request, response);
    		   return mv;
		  }
           OrderFormQueryObject ofqo = new OrderFormQueryObject(currentPage, mv,
                   "addTime", "desc");
           ofqo.addQuery("obj.user.id",
                         new SysMap("user_id",
                                    SecurityUserHolder.getCurrentUser().getId()), "="); 
           if (!CommUtil.null2String(order_status).equals("")){ 
               if (order_status.equals("order_submit")){
                   ofqo.addQuery("obj.order_status",
                                 new SysMap("order_status", Integer.valueOf(10)), "=");
               }
               if (order_status.equals("order_pay")){
                   ofqo.addQuery("obj.order_status",
                                 new SysMap("order_status", Integer.valueOf(20)), "=");
               }
               if (order_status.equals("order_shipping")){
                   ofqo.addQuery("obj.order_status",
                                 new SysMap("order_status", Integer.valueOf(30)), "=");
               }
               if (order_status.equals("order_receive")){
                   ofqo.addQuery("obj.order_status",
                                 new SysMap("order_status", Integer.valueOf(40)), "=");
               }
               if (order_status.equals("order_evaluate")){
                   ofqo.addQuery("obj.order_status",
                                 new SysMap("order_status", Integer.valueOf(50)), "=");
               }
               if (order_status.equals("order_finish")){
                   ofqo.addQuery("obj.order_status",
                                 new SysMap("order_status", Integer.valueOf(60)), "=");
               }
               if (order_status.equals("order_cancel")){
                   ofqo.addQuery("obj.order_status",
                                 new SysMap("order_status", Integer.valueOf(0)), "=");
               }
               if (order_status.equals("order_tosendgoods")){
                   ofqo.addQuery("obj.order_status",
                                 new SysMap("order_status", Integer.valueOf(70)), "=");
               }
               if (order_status.equals("order_fotgoods")){
                   ofqo.addQuery("obj.order_status",
                                 new SysMap("order_status", Integer.valueOf(80)), "=");
               }
           }
           
           
           IPageList pList = this.orderFormService.list(ofqo);  
           CommUtil.saveIPageList2ModelAndView("", "", "", pList, mv);
           mv.addObject("storeViewTools", this.storeViewTools); 
           mv.addObject("order_status", order_status == null ? "all" :
                        order_status);
         
     

        return mv;
    }
    //云客订单列表
    @RequestMapping({ "/wap/yunke/order.htm" })
    public ModelAndView yunkeorder(HttpServletRequest request, HttpServletResponse response,String currentPage,String order_status){
    	 ModelAndView mv = new JModelAndView(
                 "wap/yunke/order.html", this.configService
                 .getSysConfig(),
                 this.userConfigService.getUserConfig(), 0, request, response);
         OrderFormQueryObject ofqo = new OrderFormQueryObject(currentPage, mv,
                 "addTime", "desc");
         ofqo.addQuery("obj.user.id",
                       new SysMap("user_id",
                                  SecurityUserHolder.getCurrentUser().getId()), "="); 
         if (!CommUtil.null2String(order_status).equals("")){ 
             if (order_status.equals("order_submit")){
                 ofqo.addQuery("obj.order_status",
                               new SysMap("order_status", Integer.valueOf(10)), "=");
             }
             if (order_status.equals("order_pay")){
                 ofqo.addQuery("obj.order_status",
                               new SysMap("order_status", Integer.valueOf(20)), "=");
             }
             if (order_status.equals("order_shipping")){
                 ofqo.addQuery("obj.order_status",
                               new SysMap("order_status", Integer.valueOf(30)), "=");
             }
             if (order_status.equals("order_receive")){
                 ofqo.addQuery("obj.order_status",
                               new SysMap("order_status", Integer.valueOf(40)), "=");
             }
             if (order_status.equals("order_evaluate")){
                 ofqo.addQuery("obj.order_status",
                               new SysMap("order_status", Integer.valueOf(50)), "=");
             }
             if (order_status.equals("order_finish")){
                 ofqo.addQuery("obj.order_status",
                               new SysMap("order_status", Integer.valueOf(60)), "=");
             }
             if (order_status.equals("order_cancel")){
                 ofqo.addQuery("obj.order_status",
                               new SysMap("order_status", Integer.valueOf(0)), "=");
             }
             if (order_status.equals("order_tosendgoods")){
                 ofqo.addQuery("obj.order_status",
                               new SysMap("order_status", Integer.valueOf(70)), "=");
             }
             if (order_status.equals("order_fotgoods")){
                 ofqo.addQuery("obj.order_status",
                               new SysMap("order_status", Integer.valueOf(80)), "=");
             }
         }
         
         
         IPageList pList = this.orderFormService.list(ofqo);  
         CommUtil.saveIPageList2ModelAndView("", "", "", pList, mv);
         mv.addObject("storeViewTools", this.storeViewTools); 
         mv.addObject("order_status", order_status == null ? "all" :
                      order_status);
         
        return mv;
    }
    //云客订单详情
    @RequestMapping({ "/wap/yunke/orderdetail.htm" })
    public ModelAndView yunkeorderdetail(HttpServletRequest request, HttpServletResponse response,String currentPage,String order_id){
    	 ModelAndView mv = new JModelAndView(
                 "wap/yunke/orderdetail.html", this.configService
                 .getSysConfig(),
                 this.userConfigService.getUserConfig(), 0, request, response);
    	 mv.addObject("obj", this.goodsService.getObjById(Long.parseLong(order_id)));
         mv.addObject("storeViewTools", this.storeViewTools); 
          
        return mv;
    } 
    //会员订单详情
    @RequestMapping({ "/wap/buyer/orderdetail.htm" })
    public ModelAndView buyerorderdetail(HttpServletRequest request, HttpServletResponse response,String currentPage,String order_id){
    	 ModelAndView mv = new JModelAndView(
                 "wap/buyer/orderdetail.html", this.configService
                 .getSysConfig(),
                 this.userConfigService.getUserConfig(), 0, request, response);
    	 mv.addObject("obj", this.goodsService.getObjById(Long.parseLong(order_id)));
         mv.addObject("storeViewTools", this.storeViewTools); 
          
        return mv;
    } 
    //会员查看物流
    @RequestMapping({ "/wap/buyer/logistics.htm" })
    public ModelAndView buyerlogistics(HttpServletRequest request, HttpServletResponse response,String currentPage,String order_id){
    	 ModelAndView mv = new JModelAndView(
                 "wap/buyer/orderdetail.html", this.configService
                 .getSysConfig(),
                 this.userConfigService.getUserConfig(), 0, request, response);
    	 mv.addObject("obj", this.goodsService.getObjById(Long.parseLong(order_id)));
         mv.addObject("storeViewTools", this.storeViewTools); 
          
        return mv;
    } 
    //云客查看物流
    @RequestMapping({ "/wap/yunke/logistics.htm" })
    public ModelAndView yunkelogistics(HttpServletRequest request, HttpServletResponse response,String currentPage,String order_id){
    	 ModelAndView mv = new JModelAndView(
                 "wap/yunke/orderdetail.html", this.configService
                 .getSysConfig(),
                 this.userConfigService.getUserConfig(), 0, request, response);
    	 mv.addObject("obj", this.goodsService.getObjById(Long.parseLong(order_id)));
         mv.addObject("storeViewTools", this.storeViewTools); 
          
        return mv;
    }
    
    
	// 订单列表
	@RequestMapping({ "/wap/order.htm" })
	@ResponseBody
	public void order(HttpServletRequest request, HttpServletResponse response) throws IOException {
		String currentPage = request.getParameter("currentPage");
		String order_status = request.getParameter("order_status");
		Map params = new HashMap();
		Claims claims=SignFilter.checkSign(request, response);
		if (claims!=null) {
			String id=claims.getId();
			System.out.println(id);
			OrderFormQueryObject ofqo = new OrderFormQueryObject(currentPage, params, "addTime", "desc");
			ofqo.addQuery("obj.user.id", new SysMap("user_id", Long.parseLong(id)), "=");
			if (!CommUtil.null2String(order_status).equals("")) {
				if (order_status.equals("order_submit")) {
					ofqo.addQuery("obj.order_status", new SysMap("order_status", Integer.valueOf(10)), "=");
				}
				if (order_status.equals("order_pay")) {
					ofqo.addQuery("obj.order_status", new SysMap("order_status", Integer.valueOf(20)), "=");
				}
				if (order_status.equals("order_shipping")) {
					ofqo.addQuery("obj.order_status", new SysMap("order_status", Integer.valueOf(30)), "=");
				}
				if (order_status.equals("order_receive")) {
					ofqo.addQuery("obj.order_status", new SysMap("order_status", Integer.valueOf(40)), "=");
				}
				if (order_status.equals("order_evaluate")) {
					ofqo.addQuery("obj.order_status", new SysMap("order_status", Integer.valueOf(50)), "=");
				}
				if (order_status.equals("order_finish")) {
					ofqo.addQuery("obj.order_status", new SysMap("order_status", Integer.valueOf(60)), "=");
				}
				if (order_status.equals("order_cancel")) {
					ofqo.addQuery("obj.order_status", new SysMap("order_status", Integer.valueOf(0)), "=");
				}
				if (order_status.equals("order_tosendgoods")) {
					ofqo.addQuery("obj.order_status", new SysMap("order_status", Integer.valueOf(70)), "=");
				}
				if (order_status.equals("order_fotgoods")) {
					ofqo.addQuery("obj.order_status", new SysMap("order_status", Integer.valueOf(80)), "=");
				}
			}

			IPageList pList = this.orderFormService.list(ofqo);
			
			 JsonConfig jsonConfig = new JsonConfig();  
			 jsonConfig.registerJsonValueProcessor(Date.class,  
			           new DateJsonValueProcessor("yyyy-MM-dd hh:mm:ss")); 
			//需要过滤的类 + 属性  
		     Map<Class<?>, Set<String>> includeMap = new HashMap<Class<?>, Set<String>>();  
		     Set<String> set = new HashSet<String>(); 
		     set.add("id");
		     set.add("addTime");
		     set.add("store");
		     set.add("gcs");
		     set.add("order_status");
		     set.add("user");
		     set.add("totalPrice"); 
		     includeMap.put(OrderForm.class, set);
		     
		     set=new HashSet<String>();  
		     set.add("store_name"); 
		     includeMap.put(Store.class, set);
		     
		     set=new HashSet<String>();  
		     set.add("userName"); 
		     includeMap.put(User.class, set);
		     
		     set=new HashSet<String>();  
		     set.add("goods"); 
		     set.add("count"); 
		     set.add("price");  
		     includeMap.put(GoodsCart.class, set);
		     
		     set=new HashSet<String>();  
		     set.add("seo_keywords"); 
		     set.add("seo_description"); 
		     set.add("goods_name"); 
		     set.add("goods_price"); 
		     set.add("goods_main_photo"); 
		     set.add("goods_specs"); 
		     includeMap.put(Goods.class, set);
		     
		     set=new HashSet<String>();  
		     set.add("name"); 
		     set.add("path");  
		     includeMap.put(Accessory.class, set);
		     
		     set=new HashSet<String>();  
		     set.add("value"); 
		     set.add("spec");
		     set.add("specImage");
		     set.add("sequence");
		     includeMap.put(GoodsSpecProperty.class, set);
		     
		     
		     set=new HashSet<String>();  
		     set.add("name"); 
		     set.add("sequence");
		     set.add("type");
		     includeMap.put(GoodsSpecification.class, set);
		     
		     
		     jsonConfig.setJsonPropertyFilter(new ComplexOutPropertyPreFilter(includeMap));

			 JSONArray json = JSONArray.fromObject(pList.getResult(), jsonConfig);  
			 SignFilter.print(request,response,json); 
		}
		

	}
	
	 
		// 订单详情
		@RequestMapping({ "/wap/orderdetail.htm" })
		@ResponseBody
		public void orderdetail(HttpServletRequest request, HttpServletResponse response) throws IOException {
			String currentPage = request.getParameter("currentPage");
			String order_status = request.getParameter("order_status");
			Map params = new HashMap();
			Claims claims=SignFilter.checkSign(request, response);
			if (claims!=null) {
				String id=claims.getId(); 
				String orderid=request.getParameter("orderid"); 
				OrderForm orderForm = this.orderFormService.getObjById(Long.parseLong(orderid));
				if (orderForm.getUser().getId()==Long.parseLong(id)) {
					 JsonConfig jsonConfig = new JsonConfig();  
					 jsonConfig.registerJsonValueProcessor(Date.class,  
					           new DateJsonValueProcessor("yyyy-MM-dd hh:mm:ss")); 
					//需要过滤的类 + 属性  
				     Map<Class<?>, Set<String>> includeMap = new HashMap<Class<?>, Set<String>>();  
				     Set<String> set = new HashSet<String>(); 
				     set.add("id");
				     set.add("addTime");
				     set.add("store");
				     set.add("gcs");
				     set.add("order_status");
				     set.add("user");
				     set.add("totalPrice"); 
				     includeMap.put(OrderForm.class, set);
				     
				     set=new HashSet<String>();  
				     set.add("store_name"); 
				     includeMap.put(Store.class, set);
				     
				     set=new HashSet<String>();  
				     set.add("userName"); 
				     includeMap.put(User.class, set);
				     
				     set=new HashSet<String>();  
				     set.add("goods"); 
				     set.add("count"); 
				     set.add("price");  
				     includeMap.put(GoodsCart.class, set);
				     
				     set=new HashSet<String>();  
				     set.add("seo_keywords"); 
				     set.add("seo_description"); 
				     set.add("goods_name"); 
				     set.add("goods_price"); 
				     set.add("goods_main_photo"); 
				     set.add("goods_specs"); 
				     includeMap.put(Goods.class, set);
				     
				     set=new HashSet<String>();  
				     set.add("name"); 
				     set.add("path");  
				     includeMap.put(Accessory.class, set);
				     
				     set=new HashSet<String>();  
				     set.add("value"); 
				     set.add("spec");
				     set.add("specImage");
				     set.add("sequence");
				     includeMap.put(GoodsSpecProperty.class, set);
				     
				     
				     set=new HashSet<String>();  
				     set.add("name"); 
				     set.add("sequence");
				     set.add("type");
				     includeMap.put(GoodsSpecification.class, set);
				     
				     
				     jsonConfig.setJsonPropertyFilter(new ComplexOutPropertyPreFilter(includeMap));

					 JSONObject json = JSONObject.fromObject(orderForm, jsonConfig);  
					 SignFilter.print(request,response,json); 
				  } 
				}else {
					 SignFilter.print(request,response,"该订单编号不存在"); 
				}
				
		}
    
}
