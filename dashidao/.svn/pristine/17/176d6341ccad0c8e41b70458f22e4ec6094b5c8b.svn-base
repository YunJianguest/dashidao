package com.dashidao.view.web.action; 
import com.dashidao.core.mv.JModelAndView;
import com.dashidao.core.security.support.SecurityUserHolder;
import com.dashidao.core.tools.CommUtil;
import com.dashidao.core.tools.Md5Encrypt;
import com.dashidao.foundation.domain.Accessory;
import com.dashidao.foundation.domain.Album;
import com.dashidao.foundation.domain.IntegralLog;
import com.dashidao.foundation.domain.Store;
import com.dashidao.foundation.domain.User;
import com.dashidao.foundation.service.*;
import com.dashidao.jwt.config.CheckResult;
import com.dashidao.jwt.config.Constant;
import com.dashidao.jwt.config.HibernateProxyTypeAdapter;
import com.dashidao.jwt.config.TokenTool;
import com.dashidao.jwt.filter.SignFilter;
import com.dashidao.jwt.util.ComplexOutPropertyPreFilter;
import com.dashidao.jwt.util.ComplexPropertyPreFilter;
import com.dashidao.jwt.util.DateJsonValueProcessor;
import com.dashidao.pay.bill.util.MD5Util;
import com.dashidao.uc.api.UCClient;
import com.dashidao.uc.api.UCTools;
import com.dashidao.view.web.tools.ImageViewTools;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import io.jsonwebtoken.Claims;
import net.sf.json.JSONObject;
import net.sf.json.JsonConfig;
import net.sf.json.processors.JsDateJsonBeanProcessor;
import net.sf.json.util.CycleDetectionStrategy;

import org.apache.commons.httpclient.HttpException;
import org.apache.commons.lang3.StringUtils; 
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;
import org.springframework.web.servlet.ModelAndView;

import javax.accessibility.AccessibleRelation;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 * 买家登录控制器
 */
@Controller
public class LoginViewAction {
    @Autowired
    private ISysConfigService configService;

    @Autowired
    private IUserConfigService userConfigService;

    @Autowired
    private IRoleService roleService;

    @Autowired
    private IUserService userService;

    @Autowired
    private IIntegralLogService integralLogService;

    @Autowired
    private IAlbumService albumService;

    @Autowired
    private ImageViewTools imageViewTools;

    @Autowired
    private UCTools ucTools;

    /**
     * 用户登录跳转页面
     * @param request
     * @param response
     * @param url
     * @return
     */
    @RequestMapping({"/user/login.htm"})
    public ModelAndView login(HttpServletRequest request, HttpServletResponse response, String url){
        ModelAndView mv = new JModelAndView("login.html", this.configService.getSysConfig(), this.userConfigService.getUserConfig(), 1, request, response);

        String dashidao_view_type = CommUtil.null2String(request.getSession(false).getAttribute("dashidao_view_type"));

        if ((dashidao_view_type != null) && (!dashidao_view_type.equals("")) && (dashidao_view_type.equals("wap"))){
            mv = new JModelAndView("/wap/login.html", this.configService.getSysConfig(),
                                   this.userConfigService.getUserConfig(), 1, request, response);
        }

        request.getSession(false).removeAttribute("verify_code");
        boolean domain_error = CommUtil.null2Boolean(request.getSession(false).getAttribute("domain_error"));
        if ((url != null) && (!url.equals(""))){
            request.getSession(false).setAttribute("refererUrl", url);
        }
        if (domain_error){
            mv = new JModelAndView("error.html", this.configService.getSysConfig(), this.userConfigService.getUserConfig(), 1, request, response);
            if ((dashidao_view_type != null) && (!dashidao_view_type.equals("")) && (dashidao_view_type.equals("wap"))){
                mv = new JModelAndView("wap/error.html", this.configService.getSysConfig(), this.userConfigService.getUserConfig(), 1, request, response);
            }
        }else{
            mv.addObject("imageViewTools", this.imageViewTools);
        }
        mv.addObject("uc_logout_js", request.getSession(false).getAttribute("uc_logout_js"));

        return mv;
    }
    
    /**
     * 会员登录跳转页面
     * @param request
     * @param response
     * @param url
     * @return
     */
    @RequestMapping({"/user/buyer_login.htm"})
    public ModelAndView buyer_login(HttpServletRequest request, HttpServletResponse response, String url){
        ModelAndView mv = new JModelAndView("login.html", this.configService.getSysConfig(), this.userConfigService.getUserConfig(), 1, request, response);

        String dashidao_view_type = CommUtil.null2String(request.getSession(false).getAttribute("dashidao_view_type"));

        if ((dashidao_view_type != null) && (!dashidao_view_type.equals("")) && (dashidao_view_type.equals("wap"))){
            mv = new JModelAndView("/wap/buyer/login.html", this.configService.getSysConfig(),
                                   this.userConfigService.getUserConfig(), 1, request, response);
        }

        request.getSession(false).removeAttribute("verify_code");
        boolean domain_error = CommUtil.null2Boolean(request.getSession(false).getAttribute("domain_error"));
        if ((url != null) && (!url.equals(""))){
            request.getSession(false).setAttribute("refererUrl", url);
        }
        if (domain_error){
            mv = new JModelAndView("error.html", this.configService.getSysConfig(), this.userConfigService.getUserConfig(), 1, request, response);
            if ((dashidao_view_type != null) && (!dashidao_view_type.equals("")) && (dashidao_view_type.equals("wap"))){
                mv = new JModelAndView("wap/error.html", this.configService.getSysConfig(), this.userConfigService.getUserConfig(), 1, request, response);
            }
        }else{
            mv.addObject("imageViewTools", this.imageViewTools);
        }
        mv.addObject("uc_logout_js", request.getSession(false).getAttribute("uc_logout_js"));

        return mv;
    }
    
    /**
     * 云客登录跳转页面
     * @param request
     * @param response
     * @param url
     * @return
     */
    @RequestMapping({"/user/yunke_login.htm"})
    public ModelAndView yunke_login(HttpServletRequest request, HttpServletResponse response, String url){
        ModelAndView mv = new JModelAndView("login.html", this.configService.getSysConfig(), this.userConfigService.getUserConfig(), 1, request, response);

        String dashidao_view_type = CommUtil.null2String(request.getSession(false).getAttribute("dashidao_view_type"));

        if ((dashidao_view_type != null) && (!dashidao_view_type.equals("")) && (dashidao_view_type.equals("wap"))){
            mv = new JModelAndView("/wap/yunke/login.html", this.configService.getSysConfig(),
                                   this.userConfigService.getUserConfig(), 1, request, response);
        }

        request.getSession(false).removeAttribute("verify_code");
        boolean domain_error = CommUtil.null2Boolean(request.getSession(false).getAttribute("domain_error"));
        if ((url != null) && (!url.equals(""))){
            request.getSession(false).setAttribute("refererUrl", url);
        }
        if (domain_error){
            mv = new JModelAndView("error.html", this.configService.getSysConfig(), this.userConfigService.getUserConfig(), 1, request, response);
            if ((dashidao_view_type != null) && (!dashidao_view_type.equals("")) && (dashidao_view_type.equals("wap"))){
                mv = new JModelAndView("wap/error.html", this.configService.getSysConfig(), this.userConfigService.getUserConfig(), 1, request, response);
            }
        }else{
            mv.addObject("imageViewTools", this.imageViewTools);
        }
        mv.addObject("uc_logout_js", request.getSession(false).getAttribute("uc_logout_js"));

        return mv;
    }

    /**
     * 注册跳转页面
     * @param request
     * @param response
     * @return
     */
    @RequestMapping({"/register.htm"})
    public ModelAndView register(HttpServletRequest request, HttpServletResponse response){
        ModelAndView mv = new JModelAndView("register.html", this.configService.getSysConfig(),
                                            this.userConfigService.getUserConfig(), 1, request, response);

        String dashidao_view_type = CommUtil.null2String(request.getSession(false).getAttribute("dashidao_view_type"));

        if ((dashidao_view_type != null) && (!dashidao_view_type.equals("")) && (dashidao_view_type.equals("wap"))){
            mv = new JModelAndView("wap/register.html", this.configService.getSysConfig(),
                                   this.userConfigService.getUserConfig(), 1, request, response);
        }
        request.getSession(false).removeAttribute("verify_code");

        return mv;
    }
    /**
     * 会员注册跳转页面
     * @param request
     * @param response
     * @return
     */
    @RequestMapping({"/user/buyer_register.htm"})
    public ModelAndView buyer_register(HttpServletRequest request, HttpServletResponse response){
        ModelAndView mv = new JModelAndView("register.html", this.configService.getSysConfig(),
                                            this.userConfigService.getUserConfig(), 1, request, response);

        String dashidao_view_type = CommUtil.null2String(request.getSession(false).getAttribute("dashidao_view_type"));

        if ((dashidao_view_type != null) && (!dashidao_view_type.equals("")) && (dashidao_view_type.equals("wap"))){
            mv = new JModelAndView("wap/buyer/register.html", this.configService.getSysConfig(),
                                   this.userConfigService.getUserConfig(), 1, request, response);
        }
        request.getSession(false).removeAttribute("verify_code");

        return mv;
    }
    /**
     * 云客注册跳转页面
     * @param request
     * @param response
     * @return
     */
    @RequestMapping({"/usr/yunke_register.htm"})
    public ModelAndView yunke_register(HttpServletRequest request, HttpServletResponse response){
        ModelAndView mv = new JModelAndView("register.html", this.configService.getSysConfig(),
                                            this.userConfigService.getUserConfig(), 1, request, response);

        String dashidao_view_type = CommUtil.null2String(request.getSession(false).getAttribute("dashidao_view_type"));

        if ((dashidao_view_type != null) && (!dashidao_view_type.equals("")) && (dashidao_view_type.equals("wap"))){
            mv = new JModelAndView("wap/huiyuan/register.html", this.configService.getSysConfig(),
                                   this.userConfigService.getUserConfig(), 1, request, response);
        }
        request.getSession(false).removeAttribute("verify_code");

        return mv;
    }

    /**
     * 注册保存
     * @param request
     * @param response
     * @param userName
     * @param password
     * @param email
     * @param code
     * @return
     * @throws HttpException
     * @throws IOException
     */
    @RequestMapping({"/register_finish.htm"})
    public String register_finish(HttpServletRequest request, HttpServletResponse response, String userName, String password, String email, String code,String userRole)
    throws HttpException, IOException {
        boolean reg = true;

        // 判断验证码
        if ((code != null) && (!code.equals(""))){
            code = CommUtil.filterHTML(code);
        }
        if (this.configService.getSysConfig().isSecurityCodeRegister()){
            if (!request.getSession(false).getAttribute("verify_code").equals(code)){
                reg = false;
            }
        }

        // 用户名不能重复
        Map params = new HashMap();
        params.put("userName", userName);
        List users = this.userService.query("select obj from User obj where obj.userName=:userName", params, -1, -1);
        if ((users != null) && (users.size() > 0)){
            reg = false;
        }

        if (reg){
            User user = new User();
            user.setUserName(userName);
            if(StringUtils.isEmpty(userRole)) {
            	user.setUserRole("BUYER");
            }else {
            	user.setUserRole(userRole);
            }
            
            user.setAddTime(new Date());
            user.setEmail(email);
            user.setPassword(Md5Encrypt.md5(password).toLowerCase());
            params.clear();
            if (StringUtils.isEmpty(userRole)) {
            	 params.put("type", "BUYER");
			}else {
				 params.put("type", userRole);
			}
           
            List roles = this.roleService.query("select obj from Role obj where obj.type=:type", params, -1, -1);
            user.getRoles().addAll(roles);

            // 如果系统开启积分功能，则给会员新增积分
            if (this.configService.getSysConfig().isIntegral()){
                user.setIntegral(this.configService.getSysConfig().getMemberRegister());
                this.userService.save(user);
                IntegralLog log = new IntegralLog();
                log.setAddTime(new Date());
                log.setContent("用户注册增加" + this.configService.getSysConfig().getMemberRegister() + "分");
                log.setIntegral(this.configService.getSysConfig().getMemberRegister());
                log.setIntegral_user(user);
                log.setType("reg");
                this.integralLogService.save(log);
            }else{
                this.userService.save(user);
            }

            // 设置相册
            Album album = new Album();
            album.setAddTime(new Date());
            album.setAlbum_default(true);
            album.setAlbum_name("默认相册");
            album.setAlbum_sequence(-10000);
            album.setUser(user);
            this.albumService.save(album);

            request.getSession(false).removeAttribute("verify_code");

            // UC会员同步
            if (this.configService.getSysConfig().isUc_bbs()){
                UCClient client = new UCClient();
                String ret = client.uc_user_register(userName, password, email);
                int uid = Integer.parseInt(ret);
                if (uid <= 0){
                    if (uid == -1)
                        System.out.print("用户名不合法");
                   else if (uid == -2)
                        System.out.print("包含要允许注册的词语");
                   else if (uid == -3)
                        System.out.print("用户名已经存在");
                   else if (uid == -4)
                        System.out.print("Email 格式有误");
                   else if (uid == -5)
                        System.out.print("Email 不允许注册");
                   else if (uid == -6)
                        System.out.print("该 Email 已经被注册");
                    else
                        System.out.print("未定义");
                }else{
                    this.ucTools.active_user(userName, user.getPassword(), email);
                }
            }

            return "redirect:dashidao_login.htm?username=" +
                   CommUtil.encode(userName) + "&password=" + password + "&encode=true";
        }

        return "redirect:register.htm";
    }

    /**
     * 会员登录操作成功之后跳转判断
     * @param request
     * @param response
     * @return
     */
    @RequestMapping({"/buyer_login_success.htm"})
    public ModelAndView buyer_login_success(HttpServletRequest request, HttpServletResponse response){
        ModelAndView mv = new JModelAndView("success.html", this.configService.getSysConfig(), this.userConfigService.getUserConfig(), 1, request, response);
        String url = CommUtil.getURL(request) + "/index.htm";
        String dashidao_view_type = CommUtil.null2String(request.getSession(false).getAttribute("dashidao_view_type"));
        //跳转到微信端
        if ((dashidao_view_type != null) && (!dashidao_view_type.equals("")) && (dashidao_view_type.equals("wap"))){
            String store_id = CommUtil.null2String(request.getSession(false).getAttribute("store_id"));
            mv = new JModelAndView("wap/buyer/success.html",
                                   this.configService.getSysConfig(),
                                   this.userConfigService.getUserConfig(), 1, request, response);
            url = CommUtil.getURL(request) + "/wap/index.htm?store_id=" + store_id;
        }
        HttpSession session = request.getSession(false);
        if ((session.getAttribute("refererUrl") != null) &&
                (!session.getAttribute("refererUrl").equals(""))){
            url = (String)session.getAttribute("refererUrl");
            session.removeAttribute("refererUrl");
        }
        if (this.configService.getSysConfig().isUc_bbs()){
            String uc_login_js = CommUtil.null2String(request.getSession(false).getAttribute("uc_login_js"));
            mv.addObject("uc_login_js", uc_login_js);
        }
        //第三方登录：QQ、新浪等
        String bind = CommUtil.null2String(request.getSession(false).getAttribute("bind"));
        if (!bind.equals("")){
            mv = new JModelAndView(bind + "_login_bind.html",
                                   this.configService.getSysConfig(),
                                   this.userConfigService.getUserConfig(), 1, request, response);
            User user = SecurityUserHolder.getCurrentUser();
            mv.addObject("user", user);
            request.getSession(false).removeAttribute("bind");
        }
        mv.addObject("op_title", "登录成功");
        mv.addObject("url", url);

        return mv;
    }
    /**
     * 云客登录操作成功之后跳转判断
     * @param request
     * @param response
     * @return
     */
    @RequestMapping({"/yunke_login_success.htm"})
    public ModelAndView yunke_login_success(HttpServletRequest request, HttpServletResponse response){
        ModelAndView mv = new JModelAndView("success.html", this.configService.getSysConfig(), this.userConfigService.getUserConfig(), 1, request, response);
        String url = CommUtil.getURL(request) + "/index.htm";
        String dashidao_view_type = CommUtil.null2String(request.getSession(false).getAttribute("dashidao_view_type"));
        //跳转到微信端
        if ((dashidao_view_type != null) && (!dashidao_view_type.equals("")) && (dashidao_view_type.equals("wap"))){
            String store_id = CommUtil.null2String(request.getSession(false).getAttribute("store_id"));
            mv = new JModelAndView("wap/yunke/success.html",
                                   this.configService.getSysConfig(),
                                   this.userConfigService.getUserConfig(), 1, request, response);
            url = CommUtil.getURL(request) + "/wap/index.htm?store_id=" + store_id;
        }
        HttpSession session = request.getSession(false);
        if ((session.getAttribute("refererUrl") != null) &&
                (!session.getAttribute("refererUrl").equals(""))){
            url = (String)session.getAttribute("refererUrl");
            session.removeAttribute("refererUrl");
        }
        if (this.configService.getSysConfig().isUc_bbs()){
            String uc_login_js = CommUtil.null2String(request.getSession(false).getAttribute("uc_login_js"));
            mv.addObject("uc_login_js", uc_login_js);
        }
        //第三方登录：QQ、新浪等
        String bind = CommUtil.null2String(request.getSession(false).getAttribute("bind"));
        if (!bind.equals("")){
            mv = new JModelAndView(bind + "_login_bind.html",
                                   this.configService.getSysConfig(),
                                   this.userConfigService.getUserConfig(), 1, request, response);
            User user = SecurityUserHolder.getCurrentUser();
            mv.addObject("user", user);
            request.getSession(false).removeAttribute("bind");
        }
        mv.addObject("op_title", "登录成功");
        mv.addObject("url", url);

        return mv;
    }
    /**
     * 登录模态窗口
     * @param request
     * @param response
     * @return
     */
    @RequestMapping({"/user_dialog_login.htm"})
    public ModelAndView user_dialog_login(HttpServletRequest request, HttpServletResponse response){
        ModelAndView mv = new JModelAndView("user_dialog_login.html", this.configService.getSysConfig(),
                                            this.userConfigService.getUserConfig(), 1, request, response);

        return mv;
    }


    /** wap登录业务逻辑begin */

    @RequestMapping({ "/user/wap/login.htm" })
    public ModelAndView waplogin(HttpServletRequest request, HttpServletResponse response, String url){
        ModelAndView mv = new JModelAndView("wap/login.html", this.configService.getSysConfig(),
                                            this.userConfigService.getUserConfig(), 1, request, response);
        request.getSession(false).removeAttribute("verify_code");

        boolean domain_error = CommUtil.null2Boolean(request.getSession(false).getAttribute("domain_error"));
        if ((url != null) && (!url.equals(""))){
            request.getSession(false).setAttribute("refererUrl", url);
        }
        if (domain_error)
            mv = new JModelAndView("wap/error.html", this.configService.getSysConfig(), this.userConfigService.getUserConfig(), 1, request, response);
       else{
            mv.addObject("imageViewTools", this.imageViewTools);
        }
        mv.addObject("uc_logout_js", request.getSession(false).getAttribute("uc_logout_js"));

        /*String dashidao_view_type = CommUtil.null2String(request.getSession(false).getAttribute("dashidao_view_type"));

        if ((dashidao_view_type != null) && (!dashidao_view_type.equals("")) && (dashidao_view_type.equals("wap"))){
        	//String store_id = CommUtil.null2String(request.getSession(false).getAttribute("store_id"));
        	mv = new JModelAndView("wap/success.html", this.configService.getSysConfig(),
        			this.userConfigService.getUserConfig(), 1, request, response);
        	mv.addObject("op_title", "成功！");
        	mv.addObject("url", CommUtil.getURL(request) + "/wap/index.htm");
        }*/

        return mv;
    } 

    /**
     * 移动端ajax登录（授权登录并返回token和基本用户信息）
     * @throws IOException 
     */
    @RequestMapping({ "/wap/ajaxlogin.htm" })
    public void  ajaxlogin(HttpServletRequest request, HttpServletResponse response) throws IOException { 
    	String password =request.getParameter("password");
    	String name =request.getParameter("name");  
    	if (StringUtils.isNotEmpty(name)&&StringUtils.isNotEmpty(password)) {
    		Map params = new HashMap();
        	params.put("userName", name); 
        	List msgs = new ArrayList(); 
        	msgs=userService.query("select obj from User obj where obj.userName=:userName", params, -1, -1);
        	System.out.println(msgs.size());
        	if (msgs.size()==1) {
        		User user=(User) msgs.get(0);
        		System.out.println(password);
        		System.out.println(user.getPassword());
        		if(user.getPassword().equals(MD5Util.md5Hex(password))) { 
        			String result=TokenTool.createJWT(user.getId().toString(),user.getUserName(), Constant.JWT_TTL);
        			 params=new HashMap();
        			 params.put("token",result);
        			 JsonConfig jsonConfig = new JsonConfig();  
            		 jsonConfig.registerJsonValueProcessor(Date.class,  
            		           new DateJsonValueProcessor("yyyy-MM-dd hh:mm:ss"));  
            	     Map<Class<?>, Set<String>> includeMap = new HashMap<Class<?>, Set<String>>();  
            	     Set<String> set = new HashSet<String>();  
            	     set.add("userName");
            	     set.add("addTime");
            	     set.add("userRole");
            	     set.add("birthday");
            	     set.add("telephone");
            	     set.add("QQ");
            	     set.add("years");
            	     set.add("MSN");
            	     set.add("sex");
            	     set.add("photo");
            	     includeMap.put(User.class, set);
            	     
            	     set=new HashSet<String>();  
            	     set.add("name");
            	     set.add("path");
            	     set.add("info");
            	     includeMap.put(Accessory.class, set);
            	     jsonConfig.setJsonPropertyFilter(new ComplexOutPropertyPreFilter(includeMap)); 
            		 JSONObject json = JSONObject.fromObject(user, jsonConfig);
            		 params.put("user",json); 
                	 SignFilter.printNoCheck(request,response,params);
        		}
            
    		}else {
    			SignFilter.printNoCheck(request,response,"erro");
    		}
		}
    	
    	
    }
    
    /**
     * 获取用户信息
     * @throws IOException 
     */
    @RequestMapping({ "/wap/getuserdata.htm" })
    @ResponseBody
    public  void  getUser(HttpServletRequest request, HttpServletResponse response) throws IOException {
    	Claims claims=SignFilter.checkSign(request, response);
    	if(claims!=null) { 
        	String id =request.getParameter("id");  
        	if (StringUtils.isNotEmpty(id)) {
        		Map params = new HashMap();
            	params.put("id", Long.parseLong(id)); 
            	List msgs = new ArrayList(); 
            	msgs=userService.query("select obj from User obj where obj.id=:id", params, -1, -1);
            	System.out.println(msgs.size());
            	if (msgs.size()==1) {
            		 User user=(User) msgs.get(0); 
            		 JsonConfig jsonConfig = new JsonConfig();  
            		 jsonConfig.registerJsonValueProcessor(Date.class,  
            		           new DateJsonValueProcessor("yyyy-MM-dd hh:mm:ss")); 
            		//需要过滤的类 + 属性  
            	     Map<Class<?>, Set<String>> includeMap = new HashMap<Class<?>, Set<String>>();  
            	     Set<String> set = new HashSet<String>(); 
            	     set.add("userName");
            	     set.add("addTime");
            	     set.add("userRole");
            	     set.add("birthday");
            	     set.add("telephone");
            	     set.add("QQ");
            	     set.add("years");
            	     set.add("MSN");
            	     set.add("sex");
            	     set.add("photo");
            	     includeMap.put(User.class, set);
            	     
            	     set=new HashSet<String>();  
            	     set.add("name");
            	     set.add("path");
            	     set.add("info");
            	     includeMap.put(Accessory.class, set);
            	     jsonConfig.setJsonPropertyFilter(new ComplexOutPropertyPreFilter(includeMap));
 
            		 JSONObject json = JSONObject.fromObject(user, jsonConfig);  
            		 SignFilter.printNoCheck(request,response,json); 
                
        		}else {
        			SignFilter.printNoCheck(request,response,"erro");
        		}
    		}
        	 
    	}
    }


}




