package com.dashidao.view.web.action;

import com.dashidao.core.domain.virtual.SysMap;
import com.dashidao.core.mv.JModelAndView;
import com.dashidao.core.query.support.IPageList;
import com.dashidao.core.security.support.SecurityUserHolder;
import com.dashidao.core.tools.CommUtil;
import com.dashidao.core.tools.Md5Encrypt;
import com.dashidao.core.tools.WebForm;
import com.dashidao.foundation.domain.*;
import com.dashidao.foundation.domain.query.AddressQueryObject;
import com.dashidao.foundation.domain.query.AreaQueryObject;
import com.dashidao.foundation.domain.query.GoodsCartQueryObject;
import com.dashidao.foundation.domain.query.OrderFormQueryObject;
import com.dashidao.foundation.domain.query.StoreCartQueryObject;
import com.dashidao.foundation.service.*;
import com.dashidao.jwt.config.TokenTool;
import com.dashidao.jwt.filter.SignFilter;
import com.dashidao.jwt.util.ComplexOutPropertyPreFilter;
import com.dashidao.jwt.util.DateJsonValueProcessor;
import com.dashidao.manage.admin.tools.MsgTools;
import com.dashidao.view.web.tools.GoodsFloorViewTools;
import com.dashidao.view.web.tools.GoodsViewTools;
import com.dashidao.view.web.tools.NavViewTools;
import com.dashidao.view.web.tools.StoreViewTools;

import io.jsonwebtoken.Claims;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import net.sf.json.JsonConfig;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.*;

/**
 * 商城地址制器
 * 
 * @author lsp
 *
 */
@Controller
public class AddressViewAction {
	@Autowired
	private ISysConfigService configService;

	@Autowired
	private IUserConfigService userConfigService;

	@Autowired
	private IGoodsClassService goodsClassService;

	@Autowired
	private IGoodsBrandService goodsBrandService;

	@Autowired
	private IPartnerService partnerService;

	@Autowired
	private IRoleService roleService;

	@Autowired
	private IUserService userService;

	@Autowired
	private IArticleClassService articleClassService;

	@Autowired
	private IArticleService articleService;

	@Autowired
	private IAccessoryService accessoryService;

	@Autowired
	private IMessageService messageService;

	@Autowired
	private IStoreService storeService;

	@Autowired
	private IGoodsService goodsService;

	@Autowired
	private INavigationService navigationService;

	@Autowired
	private IGroupGoodsService groupGoodsService;

	@Autowired
	private IGroupService groupService;

	@Autowired
	private IGoodsFloorService goodsFloorService;

	@Autowired
	private IBargainGoodsService bargainGoodsService;

	@Autowired
	private IDeliveryGoodsService deliveryGoodsService;

	@Autowired
	private IStoreCartService storeCartService;

	@Autowired
	private IGoodsCartService goodsCartService;
	@Autowired
	private IAdvertService advertservice;

	@Autowired
	private NavViewTools navTools;

	@Autowired
	private IOrderFormService orderFormService;
	@Autowired
	private GoodsViewTools goodsViewTools;

	@Autowired
	private StoreViewTools storeViewTools;

	@Autowired
	private MsgTools msgTools;

	@Autowired
	private GoodsFloorViewTools gf_tools;
	@Autowired
	private IAddressService addressService;
	@Autowired
	private IAreaService areaService;

	// 地址列表
	@RequestMapping({ "/wap/address.htm" })
	@ResponseBody
	public void address(HttpServletRequest request, HttpServletResponse response) throws IOException {
		String currentPage = request.getParameter("currentPage");
		Map params = new HashMap();
		Claims claims = SignFilter.checkSign(request, response);
		if (claims != null) {
			String id = claims.getId();
			AddressQueryObject ofqo = new AddressQueryObject(currentPage, params, "addTime", "desc");
			ofqo.addQuery("obj.user.id", new SysMap("user_id", Long.parseLong(id)), "=");

			IPageList pList = this.addressService.list(ofqo);

			JsonConfig jsonConfig = new JsonConfig();
			jsonConfig.registerJsonValueProcessor(Date.class, new DateJsonValueProcessor("yyyy-MM-dd hh:mm:ss"));
			// 需要过滤的类 + 属性
			Map<Class<?>, Set<String>> includeMap = new HashMap<Class<?>, Set<String>>();
			Set<String> set = new HashSet<String>();
			set.add("id");
			set.add("trueName");
			set.add("area_info");
			set.add("zip");
			set.add("telephone");
			set.add("mobile");
			set.add("area");
			set.add("area_provinces");
			includeMap.put(Address.class, set);

			set = new HashSet<String>();
			set.add("areaName");
			set.add("childs");
			set.add("sequence");
			set.add("level");
			set.add("common"); 
			includeMap.put(Area.class, set);

			jsonConfig.setJsonPropertyFilter(new ComplexOutPropertyPreFilter(includeMap));

			JSONArray json = JSONArray.fromObject(pList.getResult(), jsonConfig);
			SignFilter.print(request, response, json);
		}

	}

	// 地址详情
	@RequestMapping({ "/wap/addressdetail.htm" })
	@ResponseBody
	public void addressdetail(HttpServletRequest request, HttpServletResponse response) throws IOException {
		String currentPage = request.getParameter("currentPage");
		String order_status = request.getParameter("order_status");
		Map params = new HashMap();
		Claims claims = SignFilter.checkSign(request, response);
		if (claims != null) {
			String id = claims.getId();
			String addressid = request.getParameter("addressid");
			Address address = this.addressService.getObjById(Long.parseLong(addressid));
			JsonConfig jsonConfig = new JsonConfig();
			jsonConfig.registerJsonValueProcessor(Date.class, new DateJsonValueProcessor("yyyy-MM-dd hh:mm:ss"));
			// 需要过滤的类 + 属性
			Map<Class<?>, Set<String>> includeMap = new HashMap<Class<?>, Set<String>>();
			Set<String> set = new HashSet<String>();
			set.add("id");
			set.add("trueName");
			set.add("area_info");
			set.add("zip");
			set.add("telephone");
			set.add("mobile");
			set.add("identity_card");
			set.add("area");
			set.add("area_provinces");
			includeMap.put(Address.class, set);

			set = new HashSet<String>();
			set.add("areaName");
			set.add("childs");
			set.add("sequence");
			set.add("level");
			set.add("common");
			includeMap.put(Area.class, set);

			jsonConfig.setJsonPropertyFilter(new ComplexOutPropertyPreFilter(includeMap));

			JSONObject json = JSONObject.fromObject(address, jsonConfig);
			SignFilter.print(request, response, json);
		}

	}

	// 地址保存(更新)
	@RequestMapping({ "/wap/addresssave.htm" })
	@ResponseBody
	public void addresssave(HttpServletRequest request, HttpServletResponse response) throws IOException {
		String currentPage = request.getParameter("currentPage");
		String order_status = request.getParameter("order_status");
		Map params = new HashMap();
		Claims claims = SignFilter.checkSign(request, response);
		if (claims != null) {
			String id = claims.getId();
			WebForm wf = new WebForm();
			String addressid = request.getParameter("addressid");
			String area_id = request.getParameter("area_id");
			Address address = null;
			if (addressid.equals("")) {
				address = (Address) wf.toPo(request, Address.class);
				address.setAddTime(new Date());
			} else {
				Address obj = this.addressService.getObjById(Long.valueOf(Long.parseLong(addressid)));
				address = (Address) wf.toPo(request, obj);
			}
			Area area = this.areaService.getObjById(CommUtil.null2Long(area_id));
			User user = new User();
			user.setId(Long.parseLong(id));
			address.setArea(area);
			address.setUser(user);
			if (addressid.equals(""))
				this.addressService.save(address);
			else
				this.addressService.update(address);
			SignFilter.print(request, response, address);
		}

	}
	// 地址删除
	@RequestMapping({ "/wap/addressdel.htm" })
	@ResponseBody
	public void addressdel(HttpServletRequest request, HttpServletResponse response,String mulitId) throws IOException {
		String currentPage = request.getParameter("currentPage");
		String order_status = request.getParameter("order_status");
		Map params = new HashMap();
		Claims claims = SignFilter.checkSign(request, response);
		if (claims != null) {
			String id = claims.getId();
			  String[] ids = mulitId.split(",");
		        for (String str : ids){
		            if (!str.equals("")){ 
		                this.addressService.delete(Long.valueOf(Long.parseLong(str)));
		            }
		        } 
			SignFilter.print(request, response, "删除完成");
		}

	}
	

	/**
	 * 区域列表
	 * @param request
	 * @param response
	 * @param level最低区域等级
	 * @throws IOException
	 */
	@RequestMapping({ "/wap/areall.htm" })
	@ResponseBody
	public void  areall(HttpServletRequest request, HttpServletResponse response,String level) throws IOException {
		Map params = new HashMap(); 
 		if (StringUtils.isEmpty(level)) {
			level="3";
		}
 	    List lsarea = this.areaService.query("select obj from Area obj where obj.level<="+level+" and obj.parent.id is null order by obj.sequence asc", params, 0, 50);
			JsonConfig jsonConfig = new JsonConfig();
			jsonConfig.registerJsonValueProcessor(Date.class, new DateJsonValueProcessor("yyyy-MM-dd hh:mm:ss"));
			// 需要过滤的类 + 属性
			Map<Class<?>, Set<String>> includeMap = new HashMap<Class<?>, Set<String>>();
			Set<String> set = new HashSet<String>();
			set.add("id");
			set.add("areaName");
			set.add("childs");
			set.add("sequence");
			set.add("level"); 
			includeMap.put(Area.class, set); 

			jsonConfig.setJsonPropertyFilter(new ComplexOutPropertyPreFilter(includeMap));

			JSONArray json = JSONArray.fromObject(lsarea, jsonConfig);
			SignFilter.printNoCheck(request, response, json);
		}
 

}
